import type { Card, Rank, Suit } from "./Card"
import type { GameState } from "./OhHell"
import type { Player } from "./Player"

import { always } from "Function"
import List from "List"
import { fromMaybe } from "Maybe"
import String from "String"
import Terminal from "Terminal"

import {
  Ace,
  Card,
  Clubs,
  Diamonds,
  Hearts,
  InvalidRank,
  Jack,
  Joker,
  King,
  NoFace,
  Queen,
  Spades,
  Wildcard,
} from "./Card"
import { sortWithTrump } from "./Deck"
import P from "./Player"



__showSuit :: Suit -> String
export __showSuit = where {
  Clubs =>
    "♧"

  Diamonds =>
    "♢"

  Hearts =>
    "♡"

  Spades =>
    "♤"

  Joker =>
    "🃏"
}

__showRank :: Rank -> String
export __showRank = where {
  Ace =>
    "A"

  NoFace(c) =>
    // we do this so that we can have the same width for all characters
    c == 10 ? "X" : show(c)

  InvalidRank =>
    "?"

  Jack =>
    "J"

  Queen =>
    "Q"

  King =>
    "K"

  Wildcard =>
    ""
}

__colorCard :: Suit -> String -> String
export __colorCard = (s, str) => if (s == Hearts || s == Diamonds) {
  Terminal.text.red(str)
} else if (s == Clubs || s == Spades) {
  Terminal.text.blue(str)
} else {
  str
}

showCard :: Card -> String
export showCard = where {
  Card(s, r) =>
    __colorCard(s, `${__showSuit(s)}${r != Wildcard ? " " ++ __showRank(r) : ""}`)
}

showHand :: Suit -> List Card -> String
showHand = (trump, hand) => pipe(
  sortWithTrump(trump),
  map(showCard),
  String.join(" "),
)(hand)

showActiveBet :: Integer -> Integer -> String
export showActiveBet = (tricks, bet) => `${show(tricks)} ⁄${show(bet)} ⌻`

showPoints :: Integer -> String
export showPoints = (x) => `${show(x)} ⌼`

spaces :: Integer -> String
spaces = pipe(
  List.repeatWith(always(" ")),
  String.join(""),
)

showPlayerHand :: Suit -> Player -> String
export showPlayerHand = (trump, player) => {
  gap = `│${spaces(53)}│`
  return where(player) {
    P.Player(name, hand, bet, tricks, points) =>
      `│ ↳ ${showHand(trump, hand)} ${spaces(10)}│\n${gap}`
  }
}

showPlayerSummary :: Player -> String
showPlayerSummary = (player) => {
  gap = `│${spaces(53)}│`
  return where(player) {
    P.Player(name, hand, bet, tricks, points) =>
      `${gap}\n│ ${name}${spaces(39 - String.length(name))}${showActiveBet(tricks, bet)}   ${
        showPoints(points)
      } │`
  }
}

showFullPlayer :: Suit -> Player -> String
export showFullPlayer = (trump, player) => `${showPlayerSummary(player)}
${showPlayerHand(trump, player)}`

showRounds :: List Integer -> Integer -> String
showRounds = (rounds, round) => pipe(
  List.length,
  List.repeatWith((i) => (i <= round ? "✦" : "✧")),
  String.join(" "),
)(rounds)

bannerLine :: Char -> Integer -> String
bannerLine = (c, x) => pipe(
  List.repeatWith(always(c)),
  String.fromList,
)(x)

showGame :: GameState -> String
export showGame = (state) => {
  lhs = 10
  rhs = 5
  width = (List.length(state.cardsPerRound) * 2) + lhs + rhs
  heavyHorizontal = bannerLine('━', width)
  horizontal = bannerLine('─', width)
  return `┏${heavyHorizontal}┓
┃ Oh Hell ┊ ${showRounds(state.cardsPerRound, state.round)} ┊ ${
    __colorCard(state.trump, __showSuit(state.trump))
  } ┃
┡${heavyHorizontal}┩
${
    pipe(
      .players,
      map(showFullPlayer(state.trump)),
      String.join("\n"),
    )(state)
  }
└${horizontal}┘`
}

showGameForPlayer :: String -> GameState -> String
export showGameForPlayer = (playerName, state) => {
  lhs = 10
  rhs = 5
  width = (List.length(state.cardsPerRound) * 2) + lhs + rhs
  heavyHorizontal = bannerLine('━', width)
  horizontal = bannerLine('─', width)
  return `┏${heavyHorizontal}┓
┃ Oh Hell ┊ ${showRounds(state.cardsPerRound, state.round)} ┊ ${
    __colorCard(state.trump, __showSuit(state.trump))
  } ┃
┡${heavyHorizontal}┩
${
    pipe(
      .players,
      map((p) => P.name(p) == playerName ? showFullPlayer(state.trump, p) : showPlayerSummary(p)),
      String.join("\n"),
    )(state)
  }
└${horizontal}┘`
}
