import type { Card, Rank, Suit } from "./Deck"
import type { ActivePlayer, Player, PlayerState } from "./OhHell"

import List from "List"
import String from "String"
import Terminal from "Terminal"

import {
  Ace,
  Card,
  Clubs,
  Diamonds,
  Hearts,
  InvalidRank,
  Jack,
  Joker,
  King,
  NoFace,
  Queen,
  Spades,
  Wildcard,
  sortWithTrump,
} from "./Deck"
import { ActivePlayer, Bet, Initial, Played, Player } from "./OhHell"



__showSuit :: Suit -> String
export __showSuit = where {
  Clubs =>
    "‚ôß"

  Diamonds =>
    "‚ô¢"

  Hearts =>
    "‚ô°"

  Spades =>
    "‚ô§"

  Joker =>
    "üÉè"
}

__showRank :: Rank -> String
export __showRank = where {
  Ace =>
    "A"

  NoFace(c) =>
    // we do this so that we can have the same width for all characters
    c == 10 ? "X" : show(c)

  InvalidRank =>
    "?"

  Jack =>
    "J"

  Queen =>
    "Q"

  King =>
    "K"

  Wildcard =>
    ""
}

__colorCard :: Suit -> String -> String
export __colorCard = (s, str) => if (s == Hearts || s == Diamonds) {
  Terminal.text.red(str)
} else if (s == Clubs || s == Spades) {
  Terminal.text.blue(str)
} else {
  str
}

showCard :: Card -> String
export showCard = where {
  Card(s, r) =>
    __colorCard(s, `${__showSuit(s)}${r != Wildcard ? "‚Äâ" ++ __showRank(r) : ""}`)
}

showHand :: Suit -> List Card -> String
showHand = (trump, hand) => pipe(
  sortWithTrump(trump),
  map(showCard),
  String.join(" "),
)(hand)

showPlayer :: Suit -> Player -> String
export showPlayer = (trump, player) => where(player) {
  Player(name, hand) =>
    `${name}: ‚ñ∫ ${showHand(trump, hand)}`
}

showPlayerState :: PlayerState -> String
showPlayerState = where {
  Initial =>
    "‚éï "

  Bet(x) =>
    `${show(x)}‚åª`

  Played =>
    "‚åº"
}

showActivePlayer :: Suit -> ActivePlayer -> String
export showActivePlayer = (trump, player) => where(player) {
  ActivePlayer(Player(name, hand), state, points) =>
    `${name} ‚ñ∂ ${showPlayerState(state)}  ‚ÅÑ ${show(points)}‚åº \n‚Ü≥ ${showHand(trump, hand)}`
}
