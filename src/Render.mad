import type { Card, Rank, Suit } from "./Card"
import type { Player } from "./Player"

import List from "List"
import String from "String"
import Terminal from "Terminal"

import {
  Ace,
  Card,
  Clubs,
  Diamonds,
  Hearts,
  InvalidRank,
  Jack,
  Joker,
  King,
  NoFace,
  Queen,
  Spades,
  Wildcard,
} from "./Card"
import { sortWithTrump } from "./Deck"
import { Player } from "./Player"



__showSuit :: Suit -> String
export __showSuit = where {
  Clubs =>
    "‚ôß"

  Diamonds =>
    "‚ô¢"

  Hearts =>
    "‚ô°"

  Spades =>
    "‚ô§"

  Joker =>
    "üÉè"
}

__showRank :: Rank -> String
export __showRank = where {
  Ace =>
    "A"

  NoFace(c) =>
    // we do this so that we can have the same width for all characters
    c == 10 ? "X" : show(c)

  InvalidRank =>
    "?"

  Jack =>
    "J"

  Queen =>
    "Q"

  King =>
    "K"

  Wildcard =>
    ""
}

__colorCard :: Suit -> String -> String
export __colorCard = (s, str) => if (s == Hearts || s == Diamonds) {
  Terminal.text.red(str)
} else if (s == Clubs || s == Spades) {
  Terminal.text.blue(str)
} else {
  str
}

showCard :: Card -> String
export showCard = where {
  Card(s, r) =>
    __colorCard(s, `${__showSuit(s)}${r != Wildcard ? "‚Äâ" ++ __showRank(r) : ""}`)
}

showHand :: Suit -> List Card -> String
showHand = (trump, hand) => pipe(
  sortWithTrump(trump),
  map(showCard),
  String.join(" "),
)(hand)

showBet :: Integer -> String
export showBet = (x) => `${show(x)} ‚åª`

showPlayer :: Suit -> Player -> String
export showPlayer = (trump, player) => where(player) {
  Player(name, hand, bet, points) =>
    `${name}:  ${showBet(bet)}  ‚¶ö ${show(points)} ‚åº\n‚Ü≥ ${showHand(trump, hand)}`
}
