import type { Maybe } from "Maybe"

import type { Card } from "./Card"

import Fn from "Function"
import List from "List"
import Math from "Math"
import { Just, Nothing } from "Maybe"

import Deck from "./Deck"



export type Player = Player(String, List Card, Integer, Integer, Integer)

name :: Player -> String
export name = where {
  Player(x, _, _, _, _) =>
    x
}

isName :: String -> Player -> Boolean
export isName = (n, p) => name(p) == n


hand :: Player -> List Card
export hand = where {
  Player(_, cards, _, _, _) =>
    cards
}

hasCard :: Card -> Player -> Boolean
export hasCard = (card, player) => pipe(
  hand,
  Deck.has(card),
)(player)

bet :: Player -> Integer
export bet = where {
  Player(_, _, x, _, _) =>
    x
}

tricks :: Player -> Integer
export tricks = where {
  Player(_, _, _, t, _) =>
    t
}

points :: Player -> Integer
export points = where {
  Player(_, _, _, _, x) =>
    x
}

countTricks :: Player -> Player
export countTricks = where {
  Player(n, _, b, t, p) =>
    Player(n, [], 0, 0, (b == t ? t + 10 : t) + p)
}

setBet :: Player -> Integer -> Player
export setBet = (player, i) => where(player) {
  Player(n, h, _, t, p) =>
    Player(n, h, i, t, p)
}

countOtherBets :: List Player -> Player -> Integer
export countOtherBets = (players, toExclude) => pipe(
  List.reject(
    pipe(
      name,
      Fn.equals(name(toExclude)),
    ),
  ),
  map(bet),
  List.reduce(Math.add, 0),
)(players)

discard :: Card -> Player -> Player
export discard = (card, player) => where(player) {
  Player(n, cards, b, t, p) =>
    Player(n, Deck.remove(card, cards), b, t, p)
}

// Keep track of who played what card
export type PlayedCard = PlayedCard(String, Card)

playCard :: Card -> Player -> Maybe PlayedCard
export playCard = (card, player) => hasCard(card, player)
  ? Just(PlayedCard(name(player), card))
  : Nothing


cardPlayedBy :: String -> PlayedCard -> Boolean
export cardPlayedBy = (playerName, pCard) => where(pCard) {
  PlayedCard(by, _) =>
    by == playerName
}

cardFromPlayed :: PlayedCard -> Card
export cardFromPlayed = where {
  PlayedCard(_, c) =>
    c
}
