import type { Either } from "Either"
import type { Maybe } from "Maybe"

import type { Card, Suit } from "./Card"
import type { Player } from "./Player"

import { EQ, GT, LT } from "Compare"
import { Left, Right } from "Either"
import Fn from "Function"
import IO from "IO"
import List from "List"
import Math from "Math"
import { Just, Nothing, fromMaybe } from "Maybe"
import Random from "Random"

import Card from "./Card"
import Deck from "./Deck"
import Player from "./Player"



export type GameStatus = Dealt | Bets(Integer) | CardsPlayed(Integer) | CountRound

export alias GameState = {
  bets :: List Integer,
  cardsPerPlayer :: Integer,
  cardsPerRound :: List Integer,
  playedCards :: List Player.PlayedCard,
  players :: List Player,
  round :: Integer,
  status :: GameStatus,
  totalPlayers :: Integer,
  trump :: Suit,
}
export alias HandWeights = {
  faceCards :: Integer,
  highestBet :: Integer,
  trumpCards :: Integer,
  trumpFaceCards :: Integer,
}

export type GameError = Error(Integer, String) | GenericError


getHumanError :: GameError -> String
export getHumanError = where {
  Error(_, s) =>
    s

  GenericError =>
    "An error occurred!"
}

cardsPerTotalPlayers :: Integer -> Integer
export cardsPerTotalPlayers = (i) => if (i >= 3 && i <= 5) {
  10
} else if (i == 6) {
  8
} else if (i == 7) {
  7
} else {
  -1
}

roundsPerTotalPlayers :: Integer -> List Integer
export roundsPerTotalPlayers = (i) => {
  max = cardsPerTotalPlayers(i) + 1
  return if (max > 0) {
    List.concat(List.reverse(List.range(2, max)), List.range(1, max))
  } else {
    [max]
  }
}


initialDeal :: Random -> List String -> Either GameError GameState
export initialDeal = (rand, playerNames) => {
  total = List.length(playerNames)
  cardsPerPlayer = cardsPerTotalPlayers(total)
  return pipe(
    Random.shuffle($, rand),
    Deck.deal(cardsPerPlayer, total),
    where {
      Just(#[hands, undealt]) =>
        Right({
          players: pipe(
            List.zip(playerNames),
            map(where { #[name, hand] => Player.Player(name, hand, 0, 0, 0) }),
          )(hands),
          trump: pipe(
            List.first,
            map(Card.suit),
            fromMaybe(Card.Joker),
          )(undealt),
          cardsPerPlayer,
          cardsPerRound: roundsPerTotalPlayers(total),
          round: 0,
          totalPlayers: List.length(playerNames),
          bets: [],
          playedCards: [],
          status: Dealt,
        })

      Nothing =>
        Left(Error(2, `Unable to deal hands for ${show(total)} players.`))
    },
  )(Deck.DECK)
}

// this is a convenience method, likely we will remove it
getPlayerByName :: GameState -> String -> Maybe Player
export getPlayerByName = (state, name) => List.find(
  where {
    Player.Player(n, _, _, _, _) =>
      n == name
  },
  state.players,
)

__largest :: List Integer -> Integer
export __largest = pipe(
  List.sortBy((a, b) => a == b ? EQ : a < b ? GT : LT),
  where {
    [a, ...z] =>
      a

    [] =>
      0
  },
)

weighHand :: Suit -> List Card -> List Integer -> HandWeights
export weighHand = (trump, cards, bets) => {
  sorted = Deck.sortWithTrump(trump, cards)
  trumpCards = Deck.filterBySuit(trump, sorted)
  faceCards = Deck.getFaceCards(sorted)
  return {
    trumpCards: List.length(trumpCards),
    faceCards: List.length(faceCards),
    highestBet: __largest(bets),
    trumpFaceCards: pipe(
      Deck.filterBySuit(trump),
      List.length,
    )(faceCards),
  }
}

/**
 * If a player has great trump cards (starting with an ace), what is the contiguous set of
 * cards that will beat all others? i.e. If they have ace through queen of trump, then
 * that would guarantee at least 3 tricks (A + K + Q)
 * This function will only search from the top down, so if the player is missing the ace
 * it will return an empty list
 */
winningCards :: Suit -> List Card -> List Card
export winningCards = (trump, cards) => {
  aceOfTrump = Card.Card(trump, Card.Ace)
  return if (!Deck.has(aceOfTrump, cards)) {
    []
  } else {
    pipe(
      Deck.filterBySuit(trump),
      Deck.sortWithTrump(trump),
      List.reduce(
        (stack, card) => pipe(
          List.first,
          fromMaybe(Card.Card(Card.Joker, Card.InvalidRank)),
          Card.consecutiveFlush(true, card),
          (yes) => yes ? List.append(card, stack) : stack,
        )(stack),
        [aceOfTrump],
      ),
    )(cards)
  }
}

canBet :: Integer -> List Integer -> Boolean
export canBet = (goal, xs) => List.reduce(Math.add, 0, xs) != goal

maxBet :: GameState -> Integer
export maxBet = (state) => pipe(
  List.nth(state.round),
  fromMaybe(state.totalPlayers),
)(state.cardsPerRound)

// getBets :: GameState -> List Integer
// export getBets = pipe(
//   .players,
//   map(Player.bet),
// )

// this has some of the needed mechanics but isn't at all yet correct
judgeByWeight :: GameState -> Player -> HandWeights -> #[Integer, Integer]
export judgeByWeight = (state, player, weights) => {
  max = maxBet(state)
  currentSum = Player.countOtherBets(state.players, player)
  upperLimit = max - currentSum
  sureBets = winningCards(state.trump, Player.hand(player))
  // return Random.integer(weights.trumpFaceCards, upperLimit, rand)
  return #[weights.trumpFaceCards, upperLimit]
}

randomIntTuple :: Random -> #[Integer, Integer] -> Integer
export randomIntTuple = (r, az) => where(az) {
  #[a, z] =>
    Random.integer(a, z, r)
}

betForPlayer :: Random -> GameState -> Player -> #[Player, Integer]
export betForPlayer = (rand, state, player) => where(player) {
  Player.Player(name, hand, _, _, _) =>
    pipe(
      .bets,
      weighHand(state.trump, hand),
      judgeByWeight(state, player),
      randomIntTuple(rand),
      (bet) => #[player, bet],
    )(state)
}

betting :: Random -> GameState -> GameState
export betting = (rand, state) => List.reduce(
  (s, p) => pipe(
    betForPlayer(rand, s),
    where {
      #[player, bet] =>
        do {
          bets = [...s.bets, bet]
          status = Bets(List.length(bets))
          return ({ ...state, bets, status, players: [...s.players, Player.setBet(player, bet)] })
        }
    },
  )(p),
  { ...state, players: [] },
  state.players,
)

updatePlayer :: Player -> List Player -> List Player
export updatePlayer = (p, ps) => map(
  Fn.when(
    pipe(
      Player.name,
      Player.isName,
    )(p),
    (_) => p,
  ),
)(ps)

playCard :: Player -> Card -> GameState -> GameState
export playCard = (player, card, state) => pipe(
  Player.playCard(card),
  where {
    Just(played) =>
      do {
        playedCards = [...state.playedCards, played]
        status = CardsPlayed(List.length(playedCards))
        return {
          ...state,
          players: updatePlayer(Player.discard(card, player), state.players),
          playedCards,
          status,
        }
      }

    Nothing =>
      state
  },
)(player)

// heather eat your heart out
getPlayedBy :: String -> GameState -> List Card
export getPlayedBy = (playerName, state) => pipe(
  .playedCards,
  List.reduce(
    (matched, pCard) => where(pCard) {
      Player.PlayedCard(by, card) =>
        by == playerName ? List.append(card, matched) : matched
    },
    [],
  ),
)(state)
