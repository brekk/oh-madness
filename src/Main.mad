import IO from "IO"
import List from "List"
import Maybe from "Maybe"
import Random from "Random"
import String from "String"

import { Ace, Card, Clubs, Diamonds, Hearts, Jack, King, NoFace, Queen, Spades } from "./Card"
import Deck from "./Deck"
import OhHell from "./OhHell"
import { Player } from "./Player"
import Render from "./Render"



/*
pipe(
  Deck.getConsecutiveRuns(false, false),
  // Deck.filterListsByLimit(4),
  map(map(showCard)),
  IO.pTrace("still not comprehensive, b/c it shortcuts"),
)([
  Card(Diamonds, Ace),
  Card(Diamonds, King),
  Card(Diamonds, Jack),
  Card(Diamonds, Queen),
  Card(Spades, NoFace(3)),
  Card(Diamonds, NoFace(2)),
  Card(Spades, NoFace(2)),
  Card(Diamonds, NoFace(4)),
  Card(Diamonds, NoFace(6)),
  Card(Diamonds, NoFace(5)),
])
*/

convenientPlayerGet = (state, player) => pipe(
  OhHell.getPlayerByName(state),
  Maybe.fromMaybe(Player("Devil", [], 0, 0, 0)),
)(player)


main = () => {
  gen = Random.generateFromString("oh-madness-0.0.0")
  // shuffled = Deck.shuffle(seed, Deck.DECK)
  // IO.cTrace("initial deal!", shuffled)
  // IO.trace("SHOW!", map(Deck.showCard, Deck.DECK_WITH_JOKERS))
  pipe(
    OhHell.initialDeal(gen),
    map(
      pipe(
        OhHell.betting(gen),
        (state) => {
          getPlayer = convenientPlayerGet(state)
          brekk = getPlayer("Brekk")
          arnaud = getPlayer("Arnaud")
          comp = getPlayer("Computer")
          return pipe(
            OhHell.playCard(brekk, Card(Hearts, Queen)),
            OhHell.playCard(arnaud, Card(Spades, NoFace(7))),
            OhHell.playCard(comp, Card(Clubs, Ace)),
          )(state)
        },
        IO.pTrace("played!"),
        Render.showGameForPlayer("Brekk"),
        IO.putLine,
      ),
    ),
  )(["Brekk", "Arnaud", "Computer"])
}
