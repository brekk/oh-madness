import { Just, Nothing } from "Maybe"
import Random from "Random"
import { assertEquals, test } from "Test"

import { Ace, Card, King, Spades, spade } from "./Card"
import {
  PlayedCard,
  Player,
  bet,
  cardFromPlayed,
  cardPlayedBy,
  countOtherBets,
  countTricks,
  discard,
  hand,
  hasCard,
  isName,
  name,
  playCard,
  points,
  setBet,
  tricks,
} from "./Player"



test("name", () => assertEquals(name(Player("cool", [], 0, 0, 0)), "cool"))

test("hand", () => assertEquals(hand(Player("cool", [], 0, 0, 0)), []))
test(
  "bet",
  () => {
    rand = Random.generateFromString("cool")
    int = Random.integer(1, 100, rand)
    return assertEquals(bet(Player("cool", [], int, 0, 0)), int)
  },
)

test(
  "tricks",
  () => {
    rand = Random.generateFromString("cool")
    int = Random.integer(1, 100, rand)
    return assertEquals(tricks(Player("cool", [], 0, int, 0)), int)
  },
)


test(
  "points",
  () => {
    rand = Random.generateFromString("cool")
    int = Random.integer(1, 100, rand)
    return assertEquals(points(Player("cool", [], 0, 0, int)), int)
  },
)

test(
  "countTricks - made bet",
  () => assertEquals(countTricks(Player("Brekk", [], 5, 5, 0)), Player("Brekk", [], 0, 0, 15)),
)

test(
  "countTricks - unmet bet",
  () => assertEquals(countTricks(Player("Brekk", [], 5, 13, 0)), Player("Brekk", [], 0, 0, 13)),
)

test(
  "setBet",
  () => {
    p = Player("Brekk", [], 100, 20, 30)
    return assertEquals(setBet(p, 40), Player("Brekk", [], 40, 20, 30))
  },
)

test(
  "countOtherBets",
  () => {
    five = Player("Five", [], 10, 0, 0)
    return assertEquals(
      countOtherBets(
        [
          Player("One", [], 4, 0, 0),
          Player("Two", [], 4, 0, 0),
          Player("Three", [], 4, 0, 0),
          Player("Four", [], 4, 0, 0),
          five,
        ],
        five,
      ),
      16,
    )
  },
)

test(
  "discard",
  () => assertEquals(
    discard(Card(Spades, Ace), Player("Brekk", [spade(Ace), spade(King)], 0, 0, 0)),
    Player("Brekk", [spade(King)], 0, 0, 0),
  ),
)

test(
  "hasCard",
  () => do {
    _ <- assertEquals(hasCard(spade(King), Player("Brekk", [], 0, 0, 0)), false)
    return assertEquals(hasCard(spade(King), Player("Brekk", [spade(King)], 0, 0, 0)), true)
  },
)

test("isName", () => assertEquals(isName("Brekk", Player("Brekk", [], 0, 0, 0)), true))

test(
  "playCard",
  () => assertEquals(
    playCard(spade(King), Player("Brekk", [spade(King)], 0, 0, 0)),
    Just(PlayedCard("Brekk", spade(King))),
  ),
)


test(
  "playCard - no match",
  () => assertEquals(playCard(spade(Ace), Player("Brekk", [spade(King)], 0, 0, 0)), Nothing),
)

test(
  "cardPlayedBy",
  () => assertEquals(cardPlayedBy("Brekk", PlayedCard("Brekk", spade(Ace))), true),
)

test(
  "cardPlayedBy - false",
  () => assertEquals(cardPlayedBy("Brekk", PlayedCard("Computer", spade(Ace))), false),
)

test(
  "cardFromPlayed",
  () => assertEquals(cardFromPlayed(PlayedCard("Zipzap", spade(Ace))), spade(Ace)),
)
