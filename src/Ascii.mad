import { always } from "Function"
import Integer from "Integer"
import List from "List"
import Math from "Math"
import String from "String"



export alias Border = {
  b :: Char,
  bl :: Char,
  br :: Char,
  l :: Char,
  r :: Char,
  t :: Char,
  tl :: Char,
  tr :: Char,
}


createBorder :: Char -> Char -> Char -> Char -> Char -> Char -> Char -> Char -> Border
export createBorder = (tl, t, tr, l, r, bl, b, br) => ({ tl, t, tr, l, r, bl, b, br })


export DEFAULT_BORDER = createBorder('┌', '─', '┐', '│', '│', '└', '─', '┘')

export type BoundaryBorder
  = VerticalBoundary(Char, Char, Char)
  | HorizontalBoundary(Char, Char, Char)

createVerticalBorder :: Char -> Char -> Char -> BoundaryBorder
export createVerticalBorder = (t, c, b) => VerticalBoundary(t, c, b)

export DEFAULT_VERTICAL_BORDER = createVerticalBorder('┬', '│', '┴')

createHorizontalBorder :: Char -> Char -> Char -> BoundaryBorder
export createHorizontalBorder = (l, c, r) => HorizontalBoundary(l, c, r)

export DEFAULT_HORIZONTAL_BORDER = createHorizontalBorder('┝', '─', '┥')

export type Alignment = AlignLeft | AlignCenter | AlignRight

export alias ContentBox = {
  border :: Border,
  content :: String,
  footer :: String,
  header :: String,
  padding :: Integer,
}
export type ContentDirection = Row | Column

export alias ContainerBox = {
  boundary :: BoundaryBorder,
  boxes :: List ContentBox,
  direction :: ContentDirection,
}

export type Box = Box(ContentBox)

export alias Aligner = { content :: Alignment, footer :: Alignment, header :: Alignment }

createBox :: Integer -> Border -> String -> String -> String -> Box
export createBox = (padding, border, header, footer, content) => Box({
  border,
  header,
  footer,
  content,
  padding,
})

export unpadded = createBox(0, DEFAULT_BORDER)
export basicBox = createBox(1, DEFAULT_BORDER)


// TODO: remove these when they land in String
padStart :: Char -> Integer -> String -> String
export padStart = (pre, count, str) => {
  len = String.length(str)
  return if (len > count) {
    str
  } else do {
    prefix = String.repeat(pre, count - len)
    return prefix ++ str
  }
}

padEnd :: Char -> Integer -> String -> String
export padEnd = (post, count, str) => {
  len = String.length(str)
  return if (len > count) {
    str
  } else do {
    suffix = String.repeat(post, count - len)
    return str ++ suffix
  }
}

cap :: Char -> Char -> String -> String
export cap = (left, right, content) => pipe(
  String.appendChar(right),
  String.prependChar(left),
)(content)

// char siu!
charSeq :: Char -> Char -> Char -> Integer -> String
export charSeq = (left, middle, right, len) => pipe(
  String.repeat($, len),
  cap(left, right),
)(middle)

// TODO: once `stringWidth` works, we should remove this hack
align :: Alignment -> Char -> Integer -> Integer -> String -> String
export align = (a, fill, width, strWidth, str) => {
  maxWidth = Math.max(width, strWidth)
  sub = Math.abs(maxWidth - width)
  charfill = String.repeat(fill)
  return if (a == AlignLeft) {
    str ++ charfill(sub)
  } else if (a == AlignCenter) do {
    count = Integer.fromFloat(Math.floor(sub / 2))
    side = charfill(count)
    return side ++ str ++ side
  } else do {
    return charfill(sub) ++ str
  }
}

renderEdge :: Integer -> String -> Alignment -> Char -> Integer -> Integer -> Char -> Char -> String
renderEdge = (padding, text, alignment, fill, max, len, l, r) => {
  return text != ""
    ? pipe(
      cap(l, r),
    )(align(alignment, fill, max + padding, len + padding, text))
    : charSeq(l, fill, r, len)
}

import IO from "IO"



// this is a temporary hack while we wait for String.width
export alias Sizes = { content :: Integer, footer :: Integer, header :: Integer, max :: Integer }

renderContentBox :: Sizes -> Aligner -> ContentBox -> String
export renderContentBox = (sizes, aligner, contentBox) => where(#[sizes, aligner, contentBox]) {
  #[
    { max: boxSize, content: contentWidth, header: headerWidth, footer: footerWidth },
    { content: cAlignment, header: hAlignment, footer: fAlignment },
    { border, header, footer, content, padding },
  ] =>
    where(border) {
      { b, bl, br, l, r, t, tl, tr } =>
        do {
          dpad = padding * 2
          len = contentWidth + dpad
          hLen = headerWidth + dpad
          fLen = footerWidth + dpad
          padBox = boxSize + dpad
          IO.pTrace(
            "LENGTHS",
            #[{ dpad, len, hLen, fLen, boxSize, padBox }, String.length(content)],
          )
          hPad = String.repeat(' ', padding)
          emptyHLine = charSeq(l, ' ', r, Math.max(padBox, len))
          vPad = padding == 0
            ? "\n"
            : pipe(
              List.repeatWith(always(emptyHLine)),
              String.join("\n"),
              cap('\n', '\n'),
            )(padding)
          top = renderEdge(padding, header, hAlignment, t, padBox, hLen, tl, tr)
          bottom = renderEdge(padding, footer, fAlignment, b, padBox, fLen, bl, br)
          wrappedContent = pipe(
            mappend(align(cAlignment, ' ', padBox, len, content)),
            mappend(hPad),
            cap(l, r),
          )(hPad)
          IO.putLine(
            `012345678${IO.red("9")}012345678${IO.red("9")}012345678${IO.red("9")}012345678${
              IO.red("9")
            }012345678${IO.red("9")}`,
          )
          return top ++ vPad ++ wrappedContent ++ vPad ++ bottom
        }
    }
}

// this is a hack until we have String.width
autoSize :: Integer -> Sizes -> Sizes
autoSize = (auto, sizes) => where(sizes) {
  { max, content, header, footer } =>
    (
      {
        max: max == 0 ? auto : max,
        content: content == 0 ? auto : content,
        header: header == 0 ? auto : header,
        footer: footer == 0 ? auto : footer,
      }
    )
}

renderBox :: Sizes -> Aligner -> Box -> String
export renderBox = (sizes, aligner, box) => where(box) {
  Box(cBox) =>
    renderContentBox(autoSize(String.length(cBox.content), sizes), aligner, cBox)
}
