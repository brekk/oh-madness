import { always } from "Function"
import List from "List"
import String from "String"



export alias Border = {
  b :: Char,
  bl :: Char,
  br :: Char,
  l :: Char,
  r :: Char,
  t :: Char,
  tl :: Char,
  tr :: Char,
}


createBorder :: Char -> Char -> Char -> Char -> Char -> Char -> Char -> Char -> Border
export createBorder = (tl, t, tr, l, r, bl, b, br) => ({ tl, t, tr, l, r, bl, b, br })


export DEFAULT_BORDER = createBorder('┌', '─', '┐', '│', '│', '└', '─', '┘')

export type BoundaryBorder
  = VerticalBoundary(Char, Char, Char)
  | HorizontalBoundary(Char, Char, Char)

createVerticalBorder :: Char -> Char -> Char -> BoundaryBorder
export createVerticalBorder = (t, c, b) => VerticalBoundary(t, c, b)

export DEFAULT_VERTICAL_BORDER = createVerticalBorder('┬', '│', '┴')

createHorizontalBorder :: Char -> Char -> Char -> BoundaryBorder
export createHorizontalBorder = (l, c, r) => HorizontalBoundary(l, c, r)

export DEFAULT_HORIZONTAL_BORDER = createHorizontalBorder('┝', '─', '┥')

export type Alignment = AlignLeft | AlignCenter | AlignRight | JustifyLeft | JustifyRight

export alias ContentBox = {
  alignment :: Alignment,
  border :: Border,
  content :: String,
  padding :: Integer,
}
export type ContentDirection = Row | Column

export alias ContainerBox = {
  boundary :: BoundaryBorder,
  boxes :: List ContentBox,
  direction :: ContentDirection,
}

export type Box = Box(ContentBox)

createBox :: Integer -> Border -> Alignment -> String -> Box
export createBox = (padding, border, alignment, content) => Box({
  border,
  alignment,
  content,
  padding,
})

export unpadded = createBox(0, DEFAULT_BORDER, AlignLeft)
export basicBox = createBox(1, DEFAULT_BORDER, AlignLeft)

// char siu!
charSeq :: Char -> Char -> Char -> Integer -> String
export charSeq = (left, middle, right, len) => pipe(
  String.repeat($, len),
  String.appendChar(right),
  String.prependChar(left),
)(middle)

renderContentBox :: Integer -> Border -> Integer -> String -> String
export renderContentBox = (width, border, padding, content) => where(border) {
  { b, bl, br, l, r, t, tl, tr } =>
    do {
      len = String.length(content) + (padding * 2)
      top = charSeq(tl, t, tr, len)
      bottom = charSeq(bl, b, br, len)
      hPad = String.repeat(' ', padding)
      borderedLine = charSeq(l, ' ', r, len)
      vPad = padding == 0
        ? "\n"
        : pipe(
          List.repeatWith(always(borderedLine)),
          String.join("\n"),
          String.appendChar('\n'),
          String.prependChar('\n'),
        )(padding)
      wrappedContent = pipe(
        mappend(content),
        mappend(hPad),
        String.appendChar(r),
        String.prependChar(l),
      )(hPad)
      return top ++ vPad ++ wrappedContent ++ vPad ++ bottom
    }
}

renderBox :: Box -> String
export renderBox = where {
  Box({ border, content, padding }) =>
    renderContentBox(String.length(content), border, padding, content)
}
