import Either from "Either"
import List from "List"
import Random from "Random"
import { assertEquals, test } from "Test"

import {
  Ace,
  Card,
  Clubs,
  Diamonds,
  Hearts,
  Jack,
  King,
  NoFace,
  Queen,
  Spades,
  diamond,
  heart,
  spade,
} from "@/Card"
import {
  Bets,
  CardsPlayed,
  CountRound,
  Dealt,
  GenericError,
  __largest,
  betForPlayer,
  betting,
  canBet,
  cardsPerTotalPlayers,
  getHumanError,
  getPlayedBy,
  initialDeal,
  judgeByWeight,
  maxBet,
  playCard,
  randomIntTuple,
  roundsPerTotalPlayers,
  sortPlayed,
  updatePlayer,
  weighHand,
  winningCards,
} from "@/OhHell"
import { PlayedCard, Player, discard } from "@/Player"



stateFixture = () => (
  {
    bets: [8, 1, 0],
    cardsPerPlayer: 10,
    cardsPerRound: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    playedCards: [],
    players: [
      Player(
        "Brekk",
        [
          Card(Spades, NoFace(2)),
          Card(Hearts, NoFace(2)),
          Card(Spades, NoFace(8)),
          Card(Hearts, NoFace(8)),
          Card(Diamonds, NoFace(7)),
          Card(Spades, NoFace(6)),
          Card(Hearts, Queen),
          Card(Clubs, Queen),
          Card(Diamonds, NoFace(8)),
          Card(Diamonds, NoFace(6)),
        ],
        8,
        0,
        0,
      ),
      Player(
        "Arnaud",
        [
          Card(Spades, NoFace(7)),
          Card(Clubs, NoFace(5)),
          Card(Clubs, King),
          Card(Clubs, NoFace(6)),
          Card(Hearts, King),
          Card(Clubs, NoFace(10)),
          Card(Clubs, NoFace(3)),
          Card(Diamonds, NoFace(9)),
          Card(Diamonds, Ace),
          Card(Hearts, NoFace(5)),
        ],
        1,
        0,
        0,
      ),
      Player(
        "Computer",
        [
          Card(Clubs, Ace),
          Card(Clubs, NoFace(4)),
          Card(Diamonds, NoFace(3)),
          Card(Hearts, NoFace(6)),
          Card(Spades, Queen),
          Card(Diamonds, Jack),
          Card(Clubs, NoFace(2)),
          Card(Spades, Ace),
          Card(Clubs, NoFace(8)),
          Card(Spades, King),
        ],
        0,
        0,
        0,
      ),
    ],
    round: 0,
    totalPlayers: 3,
    trump: Hearts,
    status: Bets(3),
  }
)

test(
  "cardsPerTotalPlayers",
  () => assertEquals(map(cardsPerTotalPlayers, List.range(2, 8)), [-1, 10, 10, 10, 8, 7]),
)

test(
  "roundsPerTotalPlayers",
  () => assertEquals(
    map(roundsPerTotalPlayers, [1, 3, 8]),
    [[0], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0]],
  ),
)

test("canBet", () => assertEquals(canBet(109, roundsPerTotalPlayers(3)), false))

test("__largest", () => assertEquals(__largest(List.range(0, 10)), 9))
test("__largest - empty", () => assertEquals(__largest([]), 0))

test(
  "weighHand",
  () => assertEquals(
    weighHand(Diamonds, [Card(Diamonds, Ace)], [10]),
    { faceCards: 1, highestBet: 10, trumpCards: 1, trumpFaceCards: 1 },
  ),
)

test(
  "initialDeal - invalid number of players",
  () => {
    rand = Random.generateFromString("test")
    return assertEquals(
      pipe(
        initialDeal(rand),
        where {
          Either.Left(x) =>
            getHumanError(x)

          _ =>
            "Whatever"
        },
      )([]),
      "Unable to deal hands for 0 players.",
    )
  },
)
test("getHumanError", () => assertEquals(getHumanError(GenericError), "An error occurred!"))

test(
  "initialDeal",
  () => {
    rand = Random.generateFromString("test")
    return assertEquals(
      initialDeal(rand, ["Brekk", "Arnaud", "Hlolli"]),
      Either.Right({
        bets: [],
        status: Dealt,
        cardsPerPlayer: 10,
        cardsPerRound: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        players: [
          Player(
            "Brekk",
            [
              Card(Hearts, NoFace(8)),
              Card(Spades, Ace),
              Card(Diamonds, NoFace(8)),
              Card(Clubs, Queen),
              Card(Spades, NoFace(9)),
              Card(Hearts, Ace),
              Card(Hearts, NoFace(4)),
              Card(Diamonds, NoFace(2)),
              Card(Clubs, NoFace(3)),
              Card(Clubs, NoFace(9)),
            ],
            0,
            0,
            0,
          ),
          Player(
            "Arnaud",
            [
              Card(Clubs, NoFace(10)),
              Card(Hearts, NoFace(7)),
              Card(Hearts, NoFace(2)),
              Card(Spades, NoFace(6)),
              Card(Hearts, NoFace(9)),
              Card(Spades, Queen),
              Card(Clubs, NoFace(4)),
              Card(Spades, NoFace(3)),
              Card(Clubs, King),
              Card(Spades, NoFace(5)),
            ],
            0,
            0,
            0,
          ),
          Player(
            "Hlolli",
            [
              Card(Diamonds, NoFace(6)),
              Card(Clubs, Jack),
              Card(Spades, Jack),
              Card(Diamonds, NoFace(10)),
              Card(Spades, NoFace(2)),
              Card(Spades, NoFace(8)),
              Card(Diamonds, King),
              Card(Clubs, NoFace(8)),
              Card(Diamonds, NoFace(4)),
              Card(Spades, King),
            ],
            0,
            0,
            0,
          ),
        ],
        round: 0,
        totalPlayers: 3,
        trump: Diamonds,
        playedCards: [],
      }),
    )
  },
)

test(
  "winningCards",
  () => do {
    _ <- assertEquals(winningCards(Diamonds, []), [])
    return assertEquals(
      winningCards(Diamonds, [Card(Diamonds, Ace), Card(Spades, Jack), Card(Diamonds, King)]),
      [Card(Diamonds, Ace), Card(Diamonds, King)],
    )
  },
)

test(
  "maxBet",
  () => assertEquals(
    maxBet({
      bets: [1, 1, 3],
      cardsPerPlayer: 1,
      cardsPerRound: [],
      playedCards: [],
      players: [Player("A", [], 0, 0, 0), Player("B", [], 0, 0, 0), Player("C", [], 0, 0, 0)],
      round: 0,
      totalPlayers: 3,
      trump: Spades,
      status: Dealt,
    }),
    3,
  ),
)

test(
  "randomIntTuple",
  () => {
    rand = Random.generate(4000)
    return assertEquals(randomIntTuple(rand, #[1, 30]), 3)
  },
)

test(
  "judgeByWeight",
  () => assertEquals(
    judgeByWeight(
      {
        bets: [1, 1, 3],
        cardsPerPlayer: 1,
        cardsPerRound: [],
        playedCards: [],
        players: [Player("A", [], 1, 0, 0), Player("B", [], 1, 0, 0), Player("C", [], 3, 0, 0)],
        round: 0,
        totalPlayers: 3,
        trump: Spades,
        status: Bets(3),
      },
      Player("A", [], 1, 0, 0),
      { faceCards: 4, highestBet: 3, trumpCards: 1, trumpFaceCards: 0 },
    ),
    #[0, -1],
  ),
)

test(
  "betForPlayer",
  () => {
    rand = Random.generate(500)
    playerA = Player("A", [spade(Ace), spade(King), spade(Queen)], 1, 0, 0)
    return assertEquals(
      betForPlayer(
        rand,
        {
          bets: [1, 1, 3],
          cardsPerPlayer: 1,
          cardsPerRound: [],
          playedCards: [],
          players: [playerA, Player("B", [], 1, 0, 0), Player("C", [], 3, 0, 0)],
          round: 0,
          totalPlayers: 3,
          trump: Spades,
          status: Bets(3),
        },
        playerA,
      ),
      #[playerA, 2],
    )
  },
)

test(
  "betting",
  () => {
    rand = Random.generateFromString("oh-madness-0.0.0")
    return assertEquals(
      betting(
        rand,
        {
          bets: [],
          cardsPerPlayer: 10,
          cardsPerRound: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
          playedCards: [],
          players: [
            Player(
              "Brekk",
              [
                Card(Spades, NoFace(2)),
                Card(Hearts, NoFace(2)),
                Card(Spades, NoFace(8)),
                Card(Hearts, NoFace(8)),
                Card(Diamonds, NoFace(7)),
                Card(Spades, NoFace(6)),
                Card(Hearts, Queen),
                Card(Clubs, Queen),
                Card(Diamonds, NoFace(8)),
                Card(Diamonds, NoFace(6)),
              ],
              8,
              0,
              0,
            ),
            Player(
              "Arnaud",
              [
                Card(Spades, NoFace(7)),
                Card(Clubs, NoFace(5)),
                Card(Clubs, King),
                Card(Clubs, NoFace(6)),
                Card(Hearts, King),
                Card(Clubs, NoFace(10)),
                Card(Clubs, NoFace(3)),
                Card(Diamonds, NoFace(9)),
                Card(Diamonds, Ace),
                Card(Hearts, NoFace(5)),
              ],
              1,
              0,
              0,
            ),
            Player(
              "Computer",
              [
                Card(Clubs, Ace),
                Card(Clubs, NoFace(4)),
                Card(Diamonds, NoFace(3)),
                Card(Hearts, NoFace(6)),
                Card(Spades, Queen),
                Card(Diamonds, Jack),
                Card(Clubs, NoFace(2)),
                Card(Spades, Ace),
                Card(Clubs, NoFace(8)),
                Card(Spades, King),
              ],
              0,
              0,
              0,
            ),
          ],
          round: 0,
          totalPlayers: 3,
          trump: Hearts,
          status: Dealt,
        },
      ),
      {
        bets: [3, 6, 0],
        cardsPerPlayer: 10,
        cardsPerRound: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        playedCards: [],
        players: [
          Player(
            "Brekk",
            [
              Card(Spades, NoFace(2)),
              Card(Hearts, NoFace(2)),
              Card(Spades, NoFace(8)),
              Card(Hearts, NoFace(8)),
              Card(Diamonds, NoFace(7)),
              Card(Spades, NoFace(6)),
              Card(Hearts, Queen),
              Card(Clubs, Queen),
              Card(Diamonds, NoFace(8)),
              Card(Diamonds, NoFace(6)),
            ],
            3,
            0,
            0,
          ),
          Player(
            "Arnaud",
            [
              Card(Spades, NoFace(7)),
              Card(Clubs, NoFace(5)),
              Card(Clubs, King),
              Card(Clubs, NoFace(6)),
              Card(Hearts, King),
              Card(Clubs, NoFace(10)),
              Card(Clubs, NoFace(3)),
              Card(Diamonds, NoFace(9)),
              Card(Diamonds, Ace),
              Card(Hearts, NoFace(5)),
            ],
            6,
            0,
            0,
          ),
          Player(
            "Computer",
            [
              Card(Clubs, Ace),
              Card(Clubs, NoFace(4)),
              Card(Diamonds, NoFace(3)),
              Card(Hearts, NoFace(6)),
              Card(Spades, Queen),
              Card(Diamonds, Jack),
              Card(Clubs, NoFace(2)),
              Card(Spades, Ace),
              Card(Clubs, NoFace(8)),
              Card(Spades, King),
            ],
            0,
            0,
            0,
          ),
        ],
        round: 0,
        totalPlayers: 3,
        trump: Hearts,
        status: Bets(3),
      },
    )
  },
)

test(
  "updatePlayer + Player.discard",
  () => {
    brekk = Player("Brekk", [spade(Ace)], 0, 0, 0)
    return assertEquals(
      updatePlayer(discard(spade(Ace), brekk), [brekk]),
      [Player("Brekk", [], 0, 0, 0)],
    )
  },
)

test(
  "playCard",
  () => {
    state = { ...stateFixture(), bets: [8, 1, 0] }
    brekk = Player(
      "Brekk",
      [
        Card(Spades, NoFace(2)),
        Card(Hearts, NoFace(2)),
        Card(Spades, NoFace(8)),
        Card(Hearts, NoFace(8)),
        Card(Diamonds, NoFace(7)),
        Card(Spades, NoFace(6)),
        Card(Hearts, Queen),
        Card(Clubs, Queen),
        Card(Diamonds, NoFace(8)),
        Card(Diamonds, NoFace(6)),
      ],
      8,
      0,
      0,
    )
    return assertEquals(
      playCard(brekk, Card(Hearts, Queen), state),
      {
        bets: [8, 1, 0],
        cardsPerPlayer: 10,
        cardsPerRound: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        playedCards: [PlayedCard("Brekk", Card(Hearts, Queen))],
        players: [
          Player(
            "Brekk",
            [
              Card(Spades, NoFace(2)),
              Card(Hearts, NoFace(2)),
              Card(Spades, NoFace(8)),
              Card(Hearts, NoFace(8)),
              Card(Diamonds, NoFace(7)),
              Card(Spades, NoFace(6)),
              Card(Clubs, Queen),
              Card(Diamonds, NoFace(8)),
              Card(Diamonds, NoFace(6)),
            ],
            8,
            0,
            0,
          ),
          Player(
            "Arnaud",
            [
              Card(Spades, NoFace(7)),
              Card(Clubs, NoFace(5)),
              Card(Clubs, King),
              Card(Clubs, NoFace(6)),
              Card(Hearts, King),
              Card(Clubs, NoFace(10)),
              Card(Clubs, NoFace(3)),
              Card(Diamonds, NoFace(9)),
              Card(Diamonds, Ace),
              Card(Hearts, NoFace(5)),
            ],
            1,
            0,
            0,
          ),
          Player(
            "Computer",
            [
              Card(Clubs, Ace),
              Card(Clubs, NoFace(4)),
              Card(Diamonds, NoFace(3)),
              Card(Hearts, NoFace(6)),
              Card(Spades, Queen),
              Card(Diamonds, Jack),
              Card(Clubs, NoFace(2)),
              Card(Spades, Ace),
              Card(Clubs, NoFace(8)),
              Card(Spades, King),
            ],
            0,
            0,
            0,
          ),
        ],
        round: 0,
        totalPlayers: 3,
        trump: Hearts,
        status: CardsPlayed(1),
      },
    )
  },
)


test(
  "playCard - can't play a card that's not yours",
  () => {
    state = stateFixture()
    brekk = Player(
      "Brekk",
      [
        Card(Spades, NoFace(2)),
        Card(Hearts, NoFace(2)),
        Card(Spades, NoFace(8)),
        Card(Hearts, NoFace(8)),
        Card(Diamonds, NoFace(7)),
        Card(Spades, NoFace(6)),
        Card(Hearts, Queen),
        Card(Clubs, Queen),
        Card(Diamonds, NoFace(8)),
        Card(Diamonds, NoFace(6)),
      ],
      8,
      0,
      0,
    )
    return assertEquals(playCard(brekk, Card(Hearts, NoFace(10)), state), state)
  },
)

test(
  "getPlayedBy",
  () => {
    state = {
      ...stateFixture(),
      playedCards: [
        PlayedCard("Brekk", Card(Spades, NoFace(2))),
        PlayedCard("Brekk", Card(Hearts, NoFace(2))),
        PlayedCard("Brekk", Card(Spades, NoFace(8))),
        PlayedCard("Brekk", Card(Hearts, NoFace(8))),
        PlayedCard("Brekk", Card(Diamonds, NoFace(7))),
      ],
    }
    return assertEquals(
      getPlayedBy("Brekk", state),
      [
        Card(Spades, NoFace(2)),
        Card(Hearts, NoFace(2)),
        Card(Spades, NoFace(8)),
        Card(Hearts, NoFace(8)),
        Card(Diamonds, NoFace(7)),
      ],
    )
  },
)

test(
  "sortPlayed",
  () => {
    pCard = (c) => PlayedCard("tester", c)
    cards = map(
      pCard,
      [
        spade(Ace),
        heart(NoFace(2)),
        diamond(NoFace(6)),
        heart(NoFace(3)),
        diamond(Ace),
        heart(NoFace(4)),
        spade(King),
        heart(NoFace(5)),
        spade(Jack),
        spade(NoFace(10)),
        spade(NoFace(3)),
      ],
    )
    return assertEquals(
      sortPlayed(Spades, cards),
      [
        PlayedCard("tester", Card(Spades, Ace)),
        PlayedCard("tester", Card(Spades, King)),
        PlayedCard("tester", Card(Spades, Jack)),
        PlayedCard("tester", Card(Spades, NoFace(10))),
        PlayedCard("tester", Card(Spades, NoFace(3))),
        PlayedCard("tester", Card(Diamonds, Ace)),
        PlayedCard("tester", Card(Diamonds, NoFace(6))),
        PlayedCard("tester", Card(Hearts, NoFace(5))),
        PlayedCard("tester", Card(Hearts, NoFace(4))),
        PlayedCard("tester", Card(Hearts, NoFace(3))),
        PlayedCard("tester", Card(Hearts, NoFace(2))),
      ],
    )
  },
)
